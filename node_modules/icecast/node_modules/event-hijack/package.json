{
  "name": "event-hijack",
  "version": "0.0.1",
  "description": "Hijacks the specified EventEmitter event",
  "main": "hijack.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-event-hijack.git"
  },
  "keywords": [
    "event",
    "EventEmitter",
    "hijack"
  ],
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://tootallnate.net"
  },
  "license": "MIT",
  "readme": "node-event-hijack\n=================\n### Hijacks the specified EventEmitter event\n\nHijacks the specified EventEmitter event name.\n\n\nInstallation\n------------\n\n``` bash\n$ npm install event-hijack\n```\n\n\nExample\n-------\n\n``` javascript\nvar hijack = require('event-hijack');\nvar EventEmitter = require('events').EventEmitter;\n\n// our test subjet \"emitter\" instance\nvar emitter = new EventEmitter();\n\n// you can use the emitter normally\nemitter.on('thing', function () {\n  console.log('got \"thing\"');\n});\n\nemitter.emit('thing');\n\n\n// once you \"hijack\" the event, subsequent listeners added for that\n// event will *not* be added as regular listeners for that event\nvar emitThing = hijack(emitter, 'thing', function () {\n  console.log('this is an *original* \"thing\" event');\n});\n\n// this will *not* be a \"thing\" listener. instead, you must\n// invoke `emitThing()` for this callback to be invoked\nemitter.on('thing', function () {\n  console.log('this is a *hijacked* event listener');\n});\n\n// emit a fake \"thing\" event, the original listener will not be invoked,\n// but the hijacked listener *will* be invoked\nemitThing();\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TooTallNate/node-event-hijack/issues"
  },
  "_id": "event-hijack@0.0.1",
  "dist": {
    "shasum": "2c594b5268ded0aa36d78d669c18387e8f58c21f"
  },
  "_from": "event-hijack@*",
  "_resolved": "https://registry.npmjs.org/event-hijack/-/event-hijack-0.0.1.tgz"
}
